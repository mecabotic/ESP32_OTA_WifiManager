/********************************************************************
  © Mecabotic LLC, todos los derechos reservados | Oswaldo Merchan 
  Template WiFiManager | OTA | ESP CHIPS

  This code is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This code is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

    Template WiFiManager | OTA | ESP CHIPS
    Version: 1.0
    Portal cautivo de wifimanager (2 campos)
    - Cuadro de texto (String)
    - Cuadro de texto (número)
    
    Entrará en modo de configuración si:
    - No puede conectarse al WiFi
    - No existe una configuración en el sistema de archivos (FS)
    - El usuario ha hecho "doble reset"
    (presionó el botón de reinicio dos veces)

    Oswaldo Jose Martinez Merchan
    https://github.com/mecabotic
    om@mecabotic.com | +56 946520834 | @mecabotic | mecabotic.com
    ESP32: https://github.com/espressif/arduino-esp32/tree/master

 *******************************************************************/
 
// ----------------------------
// Definiciones de Bibliotecas 
// ----------------------------

#include <WiFi.h>
// Biblioteca Wifi
//http://www.arduino.cc/en/Reference/WiFi
//https://github.com/arduino-libraries/WiFi

// Incluidas en libreria de espressif para ESP32. ////////////////////
//https://github.com/espressif/arduino-esp32/tree/master/libraries/

#include <FS.h>
// Biblioteca File System | Acceso al sistema de archivos
//https://github.com/espressif/arduino-esp32/tree/master/libraries/FS

#include <SPIFFS.h>
//SPIFFS es un sistema de archivos para las memorias SPI Flash NOR que utiliza el ESP32
//https://github.com/espressif/arduino-esp32/tree/master/libraries/SPIFFS

#include <HTTPClient.h>
//Biblioteca para realizar fácilmente solicitudes HTTP GET, POST y PUT a un servidor web.
//Funciona con cualquier clase derivada de Client, por lo que cambiar entre Ethernet, WiFi y GSMClient requiere cambios de código mínimos.
//https://github.com/espressif/arduino-esp32/tree/master/libraries/HTTPClient

#include <HTTPUpdate.h>
//con y sin https
//https://github.com/espressif/arduino-esp32/tree/master/libraries/HTTPUpdate

#include <WiFiClientSecure.h>
//https://github.com/espressif/arduino-esp32/tree/master/libraries/WiFiClientSecure

#include "cert.h"
// Biblioteca local, certificados TLS - SSL

#include <WiFiManager.h>
// Portal cautivo para configurar el WiFi
// Puede instalarse desde el administrador de bibliotecas (Busca "WifiManager", instala la versión Alpha)
// https://github.com/tzapu/WiFiManager

#include <ESP_DoubleResetDetector.h>
// Una biblioteca para verificar si el botón de reinicio se ha presionado dos veces
// Puede utilizarse para habilitar el modo de configuración
// Puede instalarse desde el administrador de bibliotecas (Busca "ESP_DoubleResetDetector")
// https://github.com/khoih-prog/ESP_DoubleResetDetector

#include <ArduinoJson.h>
// ArduinoJson se utiliza para analizar y crear el archivo de configuración.
// Busca "ArduinoJson" en el administrador de bibliotecas de Arduino
// https://github.com/bblanchon/ArduinoJson

// -------------------------------------
// -------   Constantes   ------
// -------------------------------------

#define ESP_DRD_USE_SPIFFS true

const int PIN_LED = 2;
const int ledPin = 13;

String FirmwareVer = {
  "1.0"
};


//Testing Version
#define URL_fw_Version "https://raw.githubusercontent.com/mecabotic/MCU_ESP/main/esp32/demo/default_version.txt"
//#define URL_fw_Version "https://raw.githubusercontent.com/mecabotic/MCU_ESP/main/esp32/demo/bin_version.txt"
#define URL_fw_Bin "https://raw.githubusercontent.com/mecabotic/MCU_ESP/main/esp32/demo/stsrfidsmsl.bin"
#define JSON_CONFIG_FILE "/og_config.json"
// Número de segundos después del reinicio durante los cuales un
// reinicio subsiguiente se considerará un "doble reset".
#define DRD_TIMEOUT 10

// Dirección de la memoria RTC que utilizará DoubleResetDetector
#define DRD_ADDRESS 0

//Variable globales

DoubleResetDetector *drd;

// Bandera para guardar los datos de configuración
bool shouldSaveConfig = false;

char testString[50] = "valor predeterminado";
int testNumber = 1500;
bool testBool = true;




// Definiciones de estructuras
struct Button {
  const uint8_t PIN;
  uint32_t numberKeyPresses;
  bool pressed;
};

Button button_boot = {
  0,
  0,
  false
};

//Prototipos de funciones
void firmwareUpdate();
int FirmwareVersionCheck();

// Codigo de interrupcion
/*void IRAM_ATTR isr(void* arg) {
    Button* s = static_cast<Button*>(arg);
    s->numberKeyPresses += 1;
    s->pressed = true;
}*/

void IRAM_ATTR isr() {
  button_boot.numberKeyPresses += 1;
  button_boot.pressed = true;
}

//Otro
unsigned long previousMillis = 0; // Almacenará la última vez que se actualizó el LED
unsigned long previousMillis_2 = 0;
const long interval = 60000;
const long mini_interval = 1000;

void setup() {
  // Agregando OTA
  pinMode(button_boot.PIN, INPUT);
  attachInterrupt(button_boot.PIN, isr, RISING);
  Serial.print("Versión activa del firmware:");
  Serial.println(FirmwareVer);
  pinMode(ledPin, OUTPUT);
  //

  pinMode(PIN_LED, OUTPUT);

  bool forceConfig = false;

  drd = new DoubleResetDetector(DRD_TIMEOUT, DRD_ADDRESS);
  if (drd->detectDoubleReset())
  {
    Serial.println(F("Forzando el modo de configuración debido al Doble Reset detectado"));
    forceConfig = true;
  }

  bool spiffsSetup = loadConfigFile();
  if (!spiffsSetup)
  {
    Serial.println(F("Forzando el modo de configuración ya que no hay configuración guardada"));
    forceConfig = true;
  }

  //WiFi.disconnect();
  WiFi.mode(WIFI_STA); // configurar explícitamente el modo, ESP se establece en STA+AP de forma predeterminada
  Serial.begin(115200);
  delay(10);

  WiFiManager wm;

  //wm.resetSettings(); // borrar configuración
  // Establecer la función de devolución de llamada para guardar la configuración
  wm.setSaveConfigCallback(saveConfigCallback);
  // Establecer la función de devolución de llamada que se llama cuando falla la conexión al WiFi anterior y entra en modo Punto de Acceso
  wm.setAPCallback(configModeCallback);

  //--- Parámetros de Configuración adicionales ---

  // Cuadro de texto (String)
  WiFiManagerParameter custom_text_box("key_text", "Ingresa tu texto aquí", testString, 50); // 50 == longitud máxima

  // Cuadro de texto (Número)
  char convertedValue[6];
  sprintf(convertedValue, "%d", testNumber); // Necesitas convertirlo a string para mostrar un valor predeterminado.

  WiFiManagerParameter custom_text_box_num("key_num", "Ingresa tu número aquí", convertedValue, 7); // 7 == longitud máxima

  // Agregar todos los parámetros aquí
  wm.addParameter(&custom_text_box);
  wm.addParameter(&custom_text_box_num);

  Serial.println("Hola");

  digitalWrite(PIN_LED, LOW);
  if (forceConfig)
  {
    if (!wm.startConfigPortal("MecaboticAP", "Soymecaboter.777"))
    {
      Serial.println("Error al conectarse y agotó el tiempo de espera");
      delay(3000);
      // reiniciar e intentar nuevamente, o tal vez poner en modo de suspensión profunda
      ESP.restart();
      delay(5000);
    }
  }
  else
  {
    if (!wm.autoConnect("MecaboticAP", "Soymecaboter.777"))
    {
      Serial.println("Error al conectarse y agotó el tiempo de espera");
      delay(3000);
      // si todavía no estamos conectados, reiniciar e intentar de nuevo desde el principio
      ESP.restart();
      delay(5000);
    }
  }

  // Si llegamos aquí, estamos conectados al WiFi
  digitalWrite(PIN_LED, HIGH);

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("Dirección IP: ");
  Serial.println(WiFi.localIP());

  // Tratar con los valores de configuración del usuario

  // Copiar el valor del string
  strncpy(testString, custom_text_box.getValue(), sizeof(testString));
  Serial.print("testString: ");
  Serial.println(testString);

  // Convertir el valor numérico
  testNumber = atoi(custom_text_box_num.getValue());
  Serial.print("testNumber: ");
  Serial.println(testNumber);

  // Guardar los parámetros personalizados en el FS
  if (shouldSaveConfig)
  {
    saveConfigFile();
  }
}


// Funcion Loop
void loop() {
  drd->loop();
   if (button_boot.pressed) { // para conectar wifi a través de la aplicación Android esp touch
    Serial.println("Iniciando actualización de firmware...");
    firmwareUpdate();
    button_boot.pressed = false;
  }
  repeatedCall();
}

// Implementacion de Funciones
void repeatedCall() {
  static int num=0;
  unsigned long currentMillis = millis();
  if ((currentMillis - previousMillis) >= interval) {
    // Guarda la última vez que se encendió el LED
    previousMillis = currentMillis;
    if (FirmwareVersionCheck()) {
      firmwareUpdate();
    }
  }
  if ((currentMillis - previousMillis_2) >= mini_interval) {
    previousMillis_2 = currentMillis;
    Serial.print("bucle de inactividad...");
    Serial.print(num++);
    Serial.print(" Versión actual del firmware:");
    Serial.println(FirmwareVer);
   
  }
}

void saveConfigFile() {
  Serial.println(F("Guardando configuración"));
  StaticJsonDocument<512> json;
  json["testString"] = testString;
  json["testNumber"] = testNumber;
  json["testBool"] = testBool;

  File configFile = SPIFFS.open(JSON_CONFIG_FILE, "w");
  if (!configFile)
  {
    Serial.println("Error al abrir el archivo de configuración para escribir");
  }

  serializeJsonPretty(json, Serial);
  if (serializeJson(json, configFile) == 0)
  {
    Serial.println(F("Error al escribir en el archivo"));
  }
  configFile.close();
}

bool loadConfigFile() {
  // Limpiar el sistema de archivos (FS) solo para pruebas
  // SPIFFS.format();

  // Leer la configuración desde el archivo JSON en el FS
  Serial.println("Montando el FS...");

  // Es posible que sea necesario llamar a SPIFFS.begin(true) la primera vez que utilices SPIFFS
  // NOTA: ¡Esta puede no ser la mejor manera de hacerlo! begin(true) reformatea SPIFFS
  // solo se llamará si falla el montaje, lo que probablemente signifique que necesita ser
  // formateado, pero tal vez no lo uses si tienes algo importante guardado en SPIFFS
  // que no se puede reemplazar.
  if (SPIFFS.begin(false) || SPIFFS.begin(true))
  {
    Serial.println("Sistema de archivos montado");
    if (SPIFFS.exists(JSON_CONFIG_FILE))
    {
      // El archivo existe, leer y cargar la configuración
      Serial.println("Leyendo archivo de configuración");
      File configFile = SPIFFS.open(JSON_CONFIG_FILE, "r");
      if (configFile)
      {
        Serial.println("Archivo de configuración abierto");
        StaticJsonDocument<512> json;
        DeserializationError error = deserializeJson(json, configFile);
        serializeJsonPretty(json, Serial);
        if (!error)
        {
          Serial.println("\nJSON analizado");

          strcpy(testString, json["testString"]);
          testNumber = json["testNumber"].as<int>();
          testBool = json["testBool"].as<bool>();

          return true;
        }
        else
        {
          Serial.println("Error al cargar la configuración JSON");
        }
      }
    }
  }
  else
  {
    Serial.println("Error al montar el sistema de archivos");
  }
  // Fin de la lectura
  return false;
}

// Función de devolución de llamada que nos notifica que es necesario guardar la configuración
void saveConfigCallback() {
  Serial.println("Se debe guardar la configuración");
  shouldSaveConfig = true;
}

// Esta función se llama cuando se lanza el modo de configuración, podría
// ser útil para actualizar una pantalla con esta información.
void configModeCallback(WiFiManager *myWiFiManager) {
  Serial.println("Modo de Configuración activado");

  Serial.print("SSID de Configuración: ");
  Serial.println(myWiFiManager->getConfigPortalSSID());

  Serial.print("Dirección IP de Configuración: ");
  Serial.println(WiFi.softAPIP());
}

void firmwareUpdate(void) {
  WiFiClientSecure client;
  client.setCACert(rootCACertificate);
  httpUpdate.setLedPin(ledPin, LOW);
  t_httpUpdate_return ret = httpUpdate.update(client, URL_fw_Bin);

  switch (ret) {
  case HTTP_UPDATE_FAILED:
    Serial.printf("Error de HTTP_UPDATE_FAILED (%d): %s\n", httpUpdate.getLastError(), httpUpdate.getLastErrorString().c_str());
    break;

  case HTTP_UPDATE_NO_UPDATES:
    Serial.println("HTTP_UPDATE_NO_UPDATES");
    break;

  case HTTP_UPDATE_OK:
    Serial.println("HTTP_UPDATE_OK");
    break;
  }
}
int FirmwareVersionCheck(void) {
  String payload;
  int httpCode;
  String fwurl = "";
  fwurl += URL_fw_Version;
  fwurl += "?";
  fwurl += String(rand());
  Serial.println(fwurl);
  WiFiClientSecure * client = new WiFiClientSecure;

  if (client) 
  {
    client -> setCACert(rootCACertificate);

    // Add a scoping block for HTTPClient https to make sure it is destroyed before WiFiClientSecure *client is 
    HTTPClient https;

    if (https.begin( * client, fwurl)) 
    { // HTTPS      
      Serial.print("[HTTPS] GET...\n");
      // start connection and send HTTP header
      delay(100);
      httpCode = https.GET();
      delay(100);
      if (httpCode == HTTP_CODE_OK) // if version received
      {
        payload = https.getString(); // save received version
      } else {
        Serial.print("error in downloading version file:");
        Serial.println(httpCode);
      }
      https.end();
    }
    delete client;
  }
      
  if (httpCode == HTTP_CODE_OK) // if version received
  {
    payload.trim();
    if (payload.equals(FirmwareVer)) {
      Serial.printf("\nEl dispositivo ya tiene la última versión del firmware:%s\n", FirmwareVer);
      return 0;
    } 
    else 
    {
      Serial.println(payload);
      Serial.println("Se detectó un nuevo firmware");
      return 1;
    }
  } 
  return 0;  
}
